//Author: Johnny Marquez

import java.util.*;
import javax.swing.*;

public class TaskFrame extends javax.swing.JFrame {
    TaskData td = new TaskData();
    DefaultListModel<String> myEmployeeModel = new DefaultListModel();
    DefaultListModel<String> myProjectModel = new DefaultListModel();
    /**
     * Creates new form TaskFrame
     */
    public TaskFrame() {
        initComponents();       
        td.readEmployeeFile();
        td.readProjectFile();
        
        populateLists(td.getEmployees(), employeeList, myEmployeeModel);
        populateLists(td.getProjects(), projectList, myProjectModel);               
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        employeeLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        reportLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        employeeList = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        reportTextArea = new javax.swing.JTextArea();
        assignButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tast Assignment");

        employeeLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        employeeLabel.setText("Employee:");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Project:");

        reportLabel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        reportLabel.setText("Report:");

        jScrollPane2.setViewportView(employeeList);

        jScrollPane1.setViewportView(projectList);

        reportTextArea.setColumns(20);
        reportTextArea.setLineWrap(true);
        reportTextArea.setRows(5);
        reportTextArea.setWrapStyleWord(true);
        jScrollPane3.setViewportView(reportTextArea);

        assignButton.setMnemonic('s');
        assignButton.setText("Assign");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        reportButton.setMnemonic('r');
        reportButton.setText("Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        exitButton.setMnemonic('x');
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        addButton.setMnemonic('a');
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(employeeLabel)
                .addGap(132, 132, 132)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reportLabel)
                .addGap(83, 83, 83))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assignButton)
                        .addGap(18, 18, 18)
                        .addComponent(reportButton)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exitButton)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeLabel)
                    .addComponent(jLabel2)
                    .addComponent(reportLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(assignButton)
                            .addComponent(reportButton)
                            .addComponent(exitButton)
                            .addComponent(addButton))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        String[] options = {"Employee", "Project"};
        String inputNameString;
        int userSelection;
        
        userSelection = JOptionPane.showOptionDialog(null, "Add a new employee or project?", "Add record", JOptionPane.DEFAULT_OPTION , JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

        if(userSelection == 0)
        {
            inputNameString = (String) JOptionPane.showInputDialog(null, "Enter the name for a new employee (name can't be duplicated.)", "Add a new employee", JOptionPane.QUESTION_MESSAGE, null, null, null);
            
            if(inputNameString != null && inputNameString.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "Please enter a valid employee name.", "No employee name entered", JOptionPane.ERROR_MESSAGE);               
            }
            else if(inputNameString != null && !isDuplicate(inputNameString, td.getEmployees()))
            {
                td.addEmployee(inputNameString);
                updateList(inputNameString, employeeList, myEmployeeModel);
            }
            else if(inputNameString != null && isDuplicate(inputNameString, td.getEmployees()))
                JOptionPane.showMessageDialog(null, "Employee already exists.", "Duplicate Entry", JOptionPane.ERROR_MESSAGE);
            else
                JOptionPane.showMessageDialog(null, "Add Employee cancelled.", "User cancellation", JOptionPane.INFORMATION_MESSAGE);                                 
        }
        else if(userSelection == 1)
        {
            inputNameString = (String) JOptionPane.showInputDialog(null, "Enter the name for a new project (name can't be duplicated.)", "Add a new project", JOptionPane.QUESTION_MESSAGE, null, null, null);

            if(inputNameString != null && inputNameString.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "Please enter a valid project name.", "No project name entered", JOptionPane.ERROR_MESSAGE);               
            }            
            else if(inputNameString != null && !isDuplicate(inputNameString, td.getProjects()))
            {
                td.addProject(inputNameString);
                updateList(inputNameString, projectList, myProjectModel);
            }
            else if(inputNameString != null && isDuplicate(inputNameString, td.getProjects()))
                JOptionPane.showMessageDialog(null, "Project already exists.", "Duplicate Entry", JOptionPane.ERROR_MESSAGE);
            else
                JOptionPane.showMessageDialog(null, "Add Project cancelled.", "User cancellation", JOptionPane.INFORMATION_MESSAGE);

        }        
    }//GEN-LAST:event_addButtonActionPerformed

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        // TODO add your handling code here:
        HashMap<String, HashSet<String>> employeesByProject = new HashMap<>();
        HashMap<String, HashSet<String>> projectsByEmployee = new HashMap<>();
        String totalRecordString = "";
        
        td.readWorkonFile();
        employeesByProject = td.getEmployeesByProject();
        projectsByEmployee = td.getProjectsByEmployee();
        
        if(isSelected(employeeList, projectList))
        {
            if(employeeList.getSelectedValuesList().size() > 0)
            { 
                for(int i = 0; i < employeeList.getSelectedValuesList().size(); i++)
                {
                    if(employeesByProject.containsKey(employeeList.getSelectedValuesList().get(i)))
                    {
                        totalRecordString += employeeList.getSelectedValuesList().get(i) + " works on " + employeesByProject.get(employeeList.getSelectedValuesList().get(i)) + "\n" + "\n";
                    }
                    else
                    {
                        totalRecordString += employeeList.getSelectedValuesList().get(i) + " works on: no project." + "\n" + "\n"; 
                    }
                                                             
                    }
                }
 
                    if(projectList.getSelectedValuesList().size() > 0)
                    {    
                        totalRecordString += "========" + "\n" + "\n";
                        for(int n = 0; n < projectList.getSelectedValuesList().size(); n++)
                        {
                            if(projectsByEmployee.containsKey(projectList.getSelectedValuesList().get(n)))
                            {                               
                                totalRecordString += projectList.getSelectedValuesList().get(n) + " project has " + projectsByEmployee.get(projectList.getSelectedValuesList().get(n)) + "\n" + "\n";
                            }
                            else
                            {
                                totalRecordString += projectList.getSelectedValuesList().get(n) + " has no employees. " + "\n" + "\n";                         
                            }
                        }                    
            }
        }
           
        reportTextArea.setText(totalRecordString);        
    }//GEN-LAST:event_reportButtonActionPerformed

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        // TODO add your handling code here:           
 
        td.readWorkonFile();

        if(isAssignSelected(employeeList, projectList))
        {
            for(int i = 0; i < employeeList.getSelectedValuesList().size(); i++)
            {

                for(int n = 0; n < projectList.getSelectedValuesList().size(); n++)
                {
                    HashSet<String> projectHashSet = new HashSet<>();

                    if(td.getEmployeesByProject().containsKey(employeeList.getSelectedValuesList().get(i)))
                    {
                        td.getEmployeesByProject().get(employeeList.getSelectedValuesList().get(i)).add(projectList.getSelectedValuesList().get(n));
                        td.getEmployeesByProject().put(employeeList.getSelectedValuesList().get(i), td.getEmployeesByProject().get(employeeList.getSelectedValuesList().get(i)));                    
                    }
                    else
                    {
                        projectHashSet.add(projectList.getSelectedValuesList().get(n));
                        td.getEmployeesByProject().put(employeeList.getSelectedValuesList().get(i), projectHashSet);
                    }
                }
            }


            for(int i = 0; i < projectList.getSelectedValuesList().size(); i++)
            {

                for(int n = 0; n < employeeList.getSelectedValuesList().size(); n++)
                {
                    HashSet<String> employeeHashSet = new HashSet<>();

                    if(td.getProjectsByEmployee().containsKey(projectList.getSelectedValuesList().get(i)))
                    {
                        td.getProjectsByEmployee().get(projectList.getSelectedValuesList().get(i)).add(employeeList.getSelectedValuesList().get(n));
                        td.getProjectsByEmployee().put(projectList.getSelectedValuesList().get(i), td.getProjectsByEmployee().get(projectList.getSelectedValuesList().get(i)));                    
                    }
                    else
                    {
                        employeeHashSet.add(employeeList.getSelectedValuesList().get(n));
                        td.getProjectsByEmployee().put(projectList.getSelectedValuesList().get(i), employeeHashSet);
                    }
                }
            }


            td.writeWorkonFile(td.getEmployeesByProject());
        }
        
    }//GEN-LAST:event_assignButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskFrame().setVisible(true);
            }
        });
    }
    
    private void populateLists(ArrayList<String> typeOfArrayList, JList typeOfJlist, DefaultListModel<String> typeOfModel)
    {       
        for(int i = 0; i < typeOfArrayList.size(); i++)
        {
            typeOfModel.addElement(typeOfArrayList.get(i));
        }
        
        typeOfJlist.setModel(typeOfModel);
    }
    
    private Boolean isDuplicate(String nameString, ArrayList<String> typeOfArrayList)
    {
        for(int i = 0; i < typeOfArrayList.size(); i++)
        {
            if(nameString.equalsIgnoreCase(typeOfArrayList.get(i)))
                return true;
        }
        return false;
    }
    
    private void updateList(String recordName, JList typeOfJList, DefaultListModel<String> typeOfModel)
    {            
        typeOfModel.addElement(recordName);
        typeOfJList.setModel(typeOfModel);
    }
    
    private boolean isSelected(JList e, JList p)
    {

        if(e.isSelectionEmpty() && p.isSelectionEmpty())
        {
            JOptionPane.showMessageDialog(null, "You must select either employee(s) or project(s).","View Task Report" , JOptionPane.ERROR_MESSAGE);
            e.requestFocusInWindow();
            return false;
        }
        return true;
    }
    
    private boolean isAssignSelected(JList e, JList p)
    {
        if(e.isSelectionEmpty() && p.isSelectionEmpty())
        {
            JOptionPane.showMessageDialog(null, "You must select either employee(s) or project(s).","View Task Report" , JOptionPane.ERROR_MESSAGE);
            e.requestFocusInWindow();
            return false;
        }
        else if(e.isSelectionEmpty())
        {
            JOptionPane.showMessageDialog(p, "You must select one or more employee's.","Assign employee to project" , JOptionPane.ERROR_MESSAGE);
            e.requestFocusInWindow();
            return false;
        }
        else if(p.isSelectionEmpty())
        {
            JOptionPane.showMessageDialog(p, "You must select one or more projects.","Assign employee to project" , JOptionPane.ERROR_MESSAGE);
            e.requestFocusInWindow();
            return false;
        }
         
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton assignButton;
    private javax.swing.JLabel employeeLabel;
    private javax.swing.JList<String> employeeList;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> projectList;
    private javax.swing.JButton reportButton;
    private javax.swing.JLabel reportLabel;
    private javax.swing.JTextArea reportTextArea;
    // End of variables declaration//GEN-END:variables
}
